name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: macos-14
    permissions:
      contents: write  # Allow pushing to repository for GitHub Pages deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper git operations
        token: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Safari extension assets
      run: npm run build
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    # Testing Phase - Always runs
    - name: Run cross-platform sync tests
      run: npm run ci:test
      
    # Building Phase - Only run if tests pass
    - name: Build Chrome extension
      run: npm run ci:build-chrome
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Run local multiplatform tests
      run: npm run ci:test-local-multiplatform
      
    # iOS Build - Always runs (creates IPA)
    - name: Build iOS app
      continue-on-error: true
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APP_PROVISIONING_PROFILE_BASE64: ${{ secrets.APP_PROVISIONING_PROFILE_BASE64 }}
        EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXTENSION_PROVISIONING_PROFILE_BASE64 }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: npm run ci:build-ios
      
    # TestFlight Upload - For main branch (development) and test-testflight branch
    - name: Upload to TestFlight
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-testflight')
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APP_PROVISIONING_PROFILE_BASE64: ${{ secrets.APP_PROVISIONING_PROFILE_BASE64 }}
        EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXTENSION_PROVISIONING_PROFILE_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: npm run ci:upload-testflight
        
    - name: Collect comprehensive debugging information
      if: always()
      run: npm run ci:collect-debug
      
    - name: Generate showcase page
      if: always()
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: npm run ci:generate-showcase
        
    - name: Upload comprehensive debugging artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-report-${{ github.sha }}
        path: |
          build-debug-report.json
          test-output.log
          local-multiplatform-test-output.log
          ios-build.log
          testflight-upload.log
          test-results/
        retention-days: 30
        
    # Production Release Assets - Only for git releases/tags
    - name: Create production release assets
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "üöÄ Creating production release assets for tag: ${GITHUB_REF#refs/tags/}"
        
        # Create release directory
        mkdir -p release-assets
        
        # Copy Chrome extension with version tag
        if [ -f "chrome-extension-${{ github.sha }}.zip" ]; then
          cp "chrome-extension-${{ github.sha }}.zip" "release-assets/bar123-chrome-extension-${GITHUB_REF#refs/tags/}.zip"
        fi
        
        # Copy iOS IPA with version tag  
        if [ -f "${{ runner.temp }}/build/bar123.ipa" ]; then
          cp "${{ runner.temp }}/build/bar123.ipa" "release-assets/bar123-ios-${GITHUB_REF#refs/tags/}.ipa"
        fi
        
        # Create release notes from changelog
        echo "# Release ${GITHUB_REF#refs/tags/}" > release-assets/RELEASE_NOTES.md
        echo "" >> release-assets/RELEASE_NOTES.md
        echo "## Downloads" >> release-assets/RELEASE_NOTES.md  
        echo "- **Chrome Extension**: bar123-chrome-extension-${GITHUB_REF#refs/tags/}.zip" >> release-assets/RELEASE_NOTES.md
        echo "- **iOS App**: bar123-ios-${GITHUB_REF#refs/tags/}.ipa" >> release-assets/RELEASE_NOTES.md
        echo "" >> release-assets/RELEASE_NOTES.md
        echo "Built from commit: ${{ github.sha }}" >> release-assets/RELEASE_NOTES.md
        
    # Upload production release assets
    - name: Upload release assets  
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: production-release-${GITHUB_REF#refs/tags/}
        path: release-assets/
        retention-days: 365

    # Deploy to GitHub Pages - Only for main branch and test-pages branch  
    - name: Deploy showcase to GitHub Pages
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-pages')
      run: |
        # Configure git for deployment
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit the docs directory
        git add docs/
        if git diff --staged --quiet; then
          echo "No changes to deploy"
        else
          git commit -m "Deploy showcase page for build ${{ github.sha }}

          ü§ñ Auto-generated GitHub Pages deployment
          
          Build: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          Event: ${{ github.event_name }}"
          
          # Push to main branch to trigger GitHub Pages
          git push origin main
        fi
        
    - name: Upload showcase page artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: showcase-page-${{ github.sha }}
        path: docs/
        retention-days: 30
        
    - name: Upload Chrome extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension-${{ github.sha }}
        path: chrome-extension-${{ github.sha }}.zip
        retention-days: 30
        
    - name: Upload iOS IPA artifact
      if: hashFiles('${{ runner.temp }}/build/bar123.ipa') != ''
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-${{ github.sha }}
        path: ${{ runner.temp }}/build/bar123.ipa
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Build summary and final status check
      run: |
        echo "=== Available Artifacts ==="
        echo "üì± Chrome extension: chrome-extension-${{ github.sha }}.zip"
        if [ -f "${{ runner.temp }}/build/bar123.ipa" ]; then
          echo "üì± iOS IPA: ios-app-${{ github.sha }} ($(du -h '${{ runner.temp }}/build/bar123.ipa' | cut -f1))"
        fi
        echo "üìä Debug report: debug-report-${{ github.sha }} (always available for analysis)"
        echo "üåê Showcase page: showcase-page-${{ github.sha }} (comprehensive project overview)"
        echo ""
        echo "=== Final Status Check ==="
        
        # Check if any critical builds failed
        TESTS_PASSED=$(jq -r '.results.tests.passed // false' build-debug-report.json)
        LOCAL_TESTS_PASSED=$(jq -r '.results.local_tests.passed // false' build-debug-report.json)
        IOS_BUILD_PASSED=$(jq -r '.results.ios_build.passed // false' build-debug-report.json)
        
        echo "‚úÖ Tests: $TESTS_PASSED"
        echo "‚úÖ Local Tests: $LOCAL_TESTS_PASSED" 
        echo "‚úÖ iOS Build: $IOS_BUILD_PASSED"
        
        # Fail the pipeline if any critical component failed
        if [ "$TESTS_PASSED" = "false" ] || [ "$LOCAL_TESTS_PASSED" = "false" ] || [ "$IOS_BUILD_PASSED" = "false" ]; then
          echo ""
          echo "‚ùå Build pipeline FAILED - check debug report for details"
          exit 1
        else
          echo ""
          echo "üéâ Build completed successfully!"
        fi