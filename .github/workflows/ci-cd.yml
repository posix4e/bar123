name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: macos-14
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    # Caching strategy:
    # - npm dependencies (node_modules and ~/.npm)
    # - Rust/Cargo dependencies and build artifacts
    # - Homebrew packages (SwiftLint)
    # - Swift Package Manager dependencies
    # - Chrome binary for testing
    # - Playwright browsers
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'  # This already caches node_modules
          
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,x86_64-apple-ios
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      id: rust-cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          libp2p-ffi/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
      
    - name: Cache Homebrew
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew/downloads
          ~/Library/Caches/Homebrew/
          /usr/local/Homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/ci-cd.yml') }}
        restore-keys: |
          ${{ runner.os }}-brew-
          
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
      
    - name: Lint code
      run: npm run lint:check
      
    - name: Cache Chrome binary
      uses: actions/cache@v4
      with:
        path: |
          ~/chrome-bin
          ~/.cache/puppeteer
        key: ${{ runner.os }}-chrome-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-chrome-
          
    - name: Build Chrome extension
      run: |
        npm run build
        npm run ci:build-chrome
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/ms-playwright
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Install Playwright
      run: |
        # Only install if not cached
        if [ ! -d "$HOME/Library/Caches/ms-playwright" ] && [ ! -d "$HOME/.cache/ms-playwright" ]; then
          npx playwright install --with-deps chromium
        fi
        npx playwright install-deps
        
    - name: Run existing tests
      run: |
        npm run ci:test
        npm run ci:test-local-multiplatform
        
    - name: Run E2E tests
      run: |
        echo "=== Running E2E Interop Tests ==="
        npm run test:js-js
        npm run test:swift-swift
        npm run test:swift-js
        
    - name: Display cache statistics
      if: always()
      run: |
        echo "=== Cache Hit Statistics ==="
        echo "Rust cache hit: ${{ steps.rust-cache.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Cache sizes:"
        du -sh ~/.cargo 2>/dev/null || echo "Cargo cache not found"
        du -sh ~/Library/Caches/ms-playwright 2>/dev/null || echo "Playwright cache not found"
        du -sh ~/Library/Developer/Xcode/DerivedData 2>/dev/null || echo "Xcode cache not found"
        
    - name: Collect artifacts and generate showcase
      if: always()
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        npm run ci:collect-debug
        npm run ci:generate-showcase
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          chrome-extension-${{ github.sha }}.zip
          build-debug-report.json
          test-output.log
          local-multiplatform-test-output.log
          test-results/
          playwright-report/
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v4
        
    - name: Build summary and final status check
      if: always()
      run: |
        echo "=== Available Artifacts ==="
        echo "üì± Chrome extension: chrome-extension-${{ github.sha }}.zip"
        echo "üìä Debug report: debug-report-${{ github.sha }} (always available for analysis)"
        echo "üåê Showcase page: showcase-page-${{ github.sha }} (comprehensive project overview)"
        echo ""
        echo "=== Final Status Check ==="
        
        # Check if any critical builds failed
        TESTS_PASSED=$(jq -r '.results.tests.passed // false' build-debug-report.json)
        LOCAL_TESTS_PASSED=$(jq -r '.results.local_tests.passed // false' build-debug-report.json)
        
        echo "‚úÖ Tests: $TESTS_PASSED"
        echo "‚úÖ Local Tests: $LOCAL_TESTS_PASSED"
        
        # Fail the pipeline if any critical component failed
        if [ "$TESTS_PASSED" = "false" ] || [ "$LOCAL_TESTS_PASSED" = "false" ]; then
          echo ""
          echo "‚ùå Build pipeline FAILED - check debug report for details"
          exit 1
        else
          echo ""
          echo "üéâ Build completed successfully!"
        fi