name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: macos-14
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint:check
      
    - name: Build Chrome extension
      run: |
        npm run build
        npm run ci:build-chrome
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
      
      
    - name: Run tests
      uses: coactions/setup-xvfb@v1
      with:
        run: |
          npm run ci:test
          npm run ci:test-local-multiplatform
      
    - name: Check Xcode Cloud build status
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking Xcode Cloud build status..."
        npm run ci:xcode-cloud-status
        
    - name: Wait for Xcode Cloud and download from TestFlight
      if: github.ref == 'refs/heads/main'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "‚è≥ Waiting for Xcode Cloud build and TestFlight upload..."
        npm run ci:xcode-cloud-wait
        
    - name: Collect artifacts and generate showcase
      if: always()
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        npm run ci:collect-debug
        npm run ci:generate-showcase
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          chrome-extension-${{ github.sha }}.zip
          ${{ runner.temp }}/build/bar123-${{ github.sha }}.ipa
          build-debug-report.json
          test-output.log
          local-multiplatform-test-output.log
          ios-build.log
          testflight-upload.log
          test-results/
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v4
        
    - name: Build summary and final status check
      if: always()
      run: |
        echo "=== Available Artifacts ==="
        echo "üì± Chrome extension: chrome-extension-${{ github.sha }}.zip"
        if [ -f "${{ runner.temp }}/build/bar123-${{ github.sha }}.ipa" ]; then
          echo "üì± iOS IPA: bar123-${{ github.sha }}.ipa ($(du -h '${{ runner.temp }}/build/bar123-${{ github.sha }}.ipa' | cut -f1))"
        fi
        echo "üìä Debug report: debug-report-${{ github.sha }} (always available for analysis)"
        echo "üåê Showcase page: showcase-page-${{ github.sha }} (comprehensive project overview)"
        echo ""
        echo "=== Final Status Check ==="
        
        # Check if any critical builds failed
        TESTS_PASSED=$(jq -r '.results.tests.passed // false' build-debug-report.json)
        LOCAL_TESTS_PASSED=$(jq -r '.results.local_tests.passed // false' build-debug-report.json)
        IOS_BUILD_PASSED=$(jq -r '.results.ios_build.passed // false' build-debug-report.json)
        
        echo "‚úÖ Tests: $TESTS_PASSED"
        echo "‚úÖ Local Tests: $LOCAL_TESTS_PASSED" 
        echo "‚úÖ iOS Build: $IOS_BUILD_PASSED"
        
        # Fail the pipeline if any critical component failed
        if [ "$TESTS_PASSED" = "false" ] || [ "$LOCAL_TESTS_PASSED" = "false" ] || [ "$IOS_BUILD_PASSED" = "false" ]; then
          echo ""
          echo "‚ùå Build pipeline FAILED - check debug report for details"
          exit 1
        else
          echo ""
          echo "üéâ Build completed successfully!"
        fi
