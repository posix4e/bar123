name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Single job on macOS to handle everything: Chrome, Safari, iOS build & deploy
  build-test-deploy:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Safari extension assets
      run: npm run build
      
    - name: Build Chrome extension
      run: npm run build-chrome
      
    - name: Run multiplatform sync tests
      run: |
        npm run test 2>&1 | tee test-output.log
        echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Create Chrome extension package
      run: |
        cd chrome-extension
        zip -r ../chrome-extension-${{ github.sha }}.zip . -x "*.DS_Store"
        
    - name: Verify extension structures
      run: |
        echo "=== Chrome Extension ==="
        ls -la chrome-extension/
        echo "Chrome manifest:"
        cat chrome-extension/manifest.json
        echo ""
        echo "=== Safari Extension ==="
        ls -la "bar123 Extension/Resources/"
        echo "Safari manifest:"
        cat "bar123 Extension/Resources/manifest.json" || echo "No Safari manifest found"

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Make scripts executable
      run: chmod +x scripts/*.js
      
    - name: Install jq
      run: brew install jq
      
    - name: Build and deploy iOS app
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APP_PROVISIONING_PROFILE_BASE64: ${{ secrets.APP_PROVISIONING_PROFILE_BASE64 }}
        EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXTENSION_PROVISIONING_PROFILE_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/tags/"*) ]]; then
          echo "Main branch/tag push: Building and uploading to TestFlight..."
          npm run ios-build-testflight 2>&1 | tee ios-build.log
          echo "IOS_BUILD_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV
        else
          echo "PR or non-main branch: Running build test only (no TestFlight upload)"
          npm run ios-build-local 2>&1 | tee ios-build.log
          echo "IOS_BUILD_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV
        fi
      continue-on-error: true
        
    - name: Collect error logs and create summary (always runs for debugging)
      if: always()
      run: |
        echo "=== Build Summary Report ===" > build-summary.json
        echo "{" >> build-summary.json
        echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> build-summary.json
        echo "  \"commit_sha\": \"${{ github.sha }}\"," >> build-summary.json
        echo "  \"event_name\": \"${{ github.event_name }}\"," >> build-summary.json
        echo "  \"ref\": \"${{ github.ref }}\"," >> build-summary.json
        echo "  \"tests\": {" >> build-summary.json
        echo "    \"exit_code\": ${TEST_EXIT_CODE:-0}," >> build-summary.json
        echo "    \"passed\": $(if [ ${TEST_EXIT_CODE:-0} -eq 0 ]; then echo true; else echo false; fi)" >> build-summary.json
        echo "  }," >> build-summary.json
        echo "  \"ios_build\": {" >> build-summary.json
        echo "    \"exit_code\": ${IOS_BUILD_EXIT_CODE:-0}," >> build-summary.json
        echo "    \"passed\": $(if [ ${IOS_BUILD_EXIT_CODE:-0} -eq 0 ]; then echo true; else echo false; fi)" >> build-summary.json
        echo "  }," >> build-summary.json
        echo "  \"artifacts\": {" >> build-summary.json
        echo "    \"chrome_extension\": $(if ls chrome-extension-*.zip >/dev/null 2>&1; then echo true; else echo false; fi)," >> build-summary.json
        echo "    \"ios_ipa\": $(if [ -f \"${{ runner.temp }}/build/bar123.ipa\" ]; then echo true; else echo false; fi)" >> build-summary.json
        echo "  }," >> build-summary.json
        echo "  \"errors\": [" >> build-summary.json
        
        # Collect test errors if any
        if [ "${TEST_EXIT_CODE:-0}" -ne 0 ] && [ -f test-output.log ]; then
          echo "    {" >> build-summary.json
          echo "      \"type\": \"test_failure\"," >> build-summary.json
          echo "      \"log_file\": \"test-output.log\"," >> build-summary.json
          echo "      \"last_lines\": [" >> build-summary.json
          tail -10 test-output.log | sed 's/"/\\"/g' | sed 's/^/        "/' | sed 's/$/",/' >> build-summary.json
          sed -i '$ s/,$//' build-summary.json  # Remove last comma
          echo "      ]" >> build-summary.json
          echo "    }" >> build-summary.json
          
          # Add iOS build errors if they exist
          if [ "${IOS_BUILD_EXIT_CODE:-0}" -ne 0 ] && [ -f ios-build.log ]; then
            echo "    ," >> build-summary.json
            echo "    {" >> build-summary.json
            echo "      \"type\": \"ios_build_failure\"," >> build-summary.json
            echo "      \"log_file\": \"ios-build.log\"," >> build-summary.json
            echo "      \"last_lines\": [" >> build-summary.json
            tail -10 ios-build.log | sed 's/"/\\"/g' | sed 's/^/        "/' | sed 's/$/",/' >> build-summary.json
            sed -i '$ s/,$//' build-summary.json
            echo "      ]" >> build-summary.json
            echo "    }" >> build-summary.json
          fi
          echo "  ]" >> build-summary.json
        elif [ "${IOS_BUILD_EXIT_CODE:-0}" -ne 0 ] && [ -f ios-build.log ]; then
          echo "    {" >> build-summary.json
          echo "      \"type\": \"ios_build_failure\"," >> build-summary.json
          echo "      \"log_file\": \"ios-build.log\"," >> build-summary.json
          echo "      \"last_lines\": [" >> build-summary.json
          tail -10 ios-build.log | sed 's/"/\\"/g' | sed 's/^/        "/' | sed 's/$/",/' >> build-summary.json
          sed -i '$ s/,$//' build-summary.json
          echo "      ]" >> build-summary.json
          echo "    }" >> build-summary.json
          echo "  ]" >> build-summary.json
        else
          echo "  ]" >> build-summary.json
        fi
        
        echo "}" >> build-summary.json
        
    - name: Upload error logs and summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.sha }}
        path: |
          build-summary.json
          test-output.log
          ios-build.log
          test-results/
        retention-days: 30
        
    - name: Check for critical failures and exit early
      if: always()
      run: |
        echo "=== Checking for critical failures ==="
        echo "Test exit code: ${TEST_EXIT_CODE:-0}"
        echo "iOS build exit code: ${IOS_BUILD_EXIT_CODE:-0}"
        
        # Fail fast if critical components failed
        if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
          echo "❌ Tests failed - stopping build"
          exit 1
        fi
        
        if [ "${IOS_BUILD_EXIT_CODE:-0}" -ne 0 ]; then
          echo "❌ iOS build failed - stopping build"
          exit 1
        fi
        
        echo "✅ All critical components passed - continuing with artifacts"
        
    - name: Upload Chrome extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension-${{ github.sha }}
        path: chrome-extension-${{ github.sha }}.zip
        retention-days: 30
        
    - name: Upload iOS IPA artifact
      uses: actions/upload-artifact@v4
      if: hashFiles('${{ runner.temp }}/build/bar123.ipa') != ''
      with:
        name: ios-app-${{ github.sha }}
        path: ${{ runner.temp }}/build/bar123.ipa
        retention-days: 30
        if-no-files-found: ignore
        
    - name: List build artifacts
      run: |
        echo "=== Build Artifacts ==="
        echo "Chrome extension:"
        ls -la chrome-extension-*.zip || echo "Chrome extension zip not found"
        echo ""
        echo "iOS IPA file:"
        ls -la "${{ runner.temp }}/build/bar123.ipa" || echo "IPA file not found"
        echo ""
        echo "Build summary:"
        cat build-summary.json
        echo ""
        echo "Available log files:"
        ls -la *.log || echo "No log files found"
        
    - name: Final status check
      run: |
        echo "✅ Build completed successfully - all components passed"