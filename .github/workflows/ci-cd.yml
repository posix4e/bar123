name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Build and test both Chrome and Safari extensions
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      chrome-sha: ${{ github.sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Safari extension assets
      run: npm run build
      
    - name: Build Chrome extension
      run: npm run build-chrome
      
    - name: Run multiplatform sync tests
      run: npm run test
      
    - name: Create Chrome extension package
      run: |
        cd chrome-extension
        zip -r ../chrome-extension-${{ github.sha }}.zip . -x "*.DS_Store"
        
    - name: Upload Chrome extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension-${{ github.sha }}
        path: chrome-extension-${{ github.sha }}.zip
        retention-days: 30
        
    - name: Verify extension structures
      run: |
        echo "=== Chrome Extension ==="
        ls -la chrome-extension/
        echo "Chrome manifest:"
        cat chrome-extension/manifest.json
        echo ""
        echo "=== Safari Extension ==="
        ls -la "bar123 Extension/Resources/"
        echo "Safari manifest:"
        cat "bar123 Extension/Resources/manifest.json" || echo "No Safari manifest found"

  # Test Safari extension and iOS build on macOS
  test-ios:
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Safari extension assets
      run: npm run build
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Make scripts executable
      run: chmod +x scripts/*.js
      
    - name: Install jq
      run: brew install jq
      
    - name: Test iOS build (no upload for PRs)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APP_PROVISIONING_PROFILE_BASE64: ${{ secrets.APP_PROVISIONING_PROFILE_BASE64 }}
        EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXTENSION_PROVISIONING_PROFILE_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "PR detected: Running build test only (no TestFlight upload)"
          npm run ios-build-local
        else
          echo "Not a PR: Skipping iOS build test"
        fi

  # Deploy to TestFlight (only on main branch pushes/tags)
  deploy-testflight:
    runs-on: macos-latest
    needs: [build-and-test, test-ios]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Safari extension assets
      run: npm run build
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Make scripts executable
      run: chmod +x scripts/*.js
      
    - name: Install jq
      run: brew install jq
      
    - name: Build and upload to TestFlight
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APP_PROVISIONING_PROFILE_BASE64: ${{ secrets.APP_PROVISIONING_PROFILE_BASE64 }}
        EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXTENSION_PROVISIONING_PROFILE_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "Building and uploading to TestFlight..."
        npm run ios-build-testflight